ARM GAS  /tmp/cc0LxBmV.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"Message.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.inv_msg_printer_default,"ax",%progbits
  18              		.align	1
  19              		.global	inv_msg_printer_default
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	inv_msg_printer_default:
  26              	.LFB128:
  27              		.file 1 "Src/Message.c"
   1:Src/Message.c **** /*
   2:Src/Message.c ****  * ________________________________________________________________________________________________
   3:Src/Message.c ****  * Copyright (c) 2015-2015 InvenSense Inc. All rights reserved.
   4:Src/Message.c ****  *
   5:Src/Message.c ****  * This software, related documentation and any modifications thereto (collectively “Software”)
   6:Src/Message.c ****  * to InvenSense and its licensors' intellectual property rights under U.S. and international copyr
   7:Src/Message.c ****  * and other intellectual property rights laws.
   8:Src/Message.c ****  *
   9:Src/Message.c ****  * InvenSense and its licensors retain all intellectual property and proprietary rights in and to t
  10:Src/Message.c ****  * and any use, reproduction, disclosure or distribution of the Software without an express license
  11:Src/Message.c ****  * from InvenSense is strictly prohibited.
  12:Src/Message.c ****  *
  13:Src/Message.c ****  * EXCEPT AS OTHERWISE PROVIDED IN A LICENSE AGREEMENT BETWEEN THE PARTIES, THE SOFTWARE IS
  14:Src/Message.c ****  * PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
  15:Src/Message.c ****  * TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
  16:Src/Message.c ****  * EXCEPT AS OTHERWISE PROVIDED IN A LICENSE AGREEMENT BETWEEN THE PARTIES, IN NO EVENT SHALL
  17:Src/Message.c ****  * INVENSENSE BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, OR
  18:Src/Message.c ****  * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT
  19:Src/Message.c ****  * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
  20:Src/Message.c ****  * OF THE SOFTWARE.
  21:Src/Message.c ****  * ________________________________________________________________________________________________
  22:Src/Message.c ****  */
  23:Src/Message.c **** 
  24:Src/Message.c **** #include "Message.h"
  25:Src/Message.c **** #include "ErrorHelper.h"
  26:Src/Message.c **** 
  27:Src/Message.c **** #include <stdio.h>
  28:Src/Message.c **** #include <stdlib.h>
  29:Src/Message.c **** #include <string.h>
  30:Src/Message.c **** 
  31:Src/Message.c **** #include "stm32f4xx_hal.h"
ARM GAS  /tmp/cc0LxBmV.s 			page 2


  32:Src/Message.c **** 
  33:Src/Message.c **** static int msg_level;
  34:Src/Message.c **** static inv_msg_printer_t msg_printer;
  35:Src/Message.c **** extern UART_HandleTypeDef huart1;
  36:Src/Message.c **** 
  37:Src/Message.c **** void inv_msg_printer_default(int level, const char * str, va_list ap)
  38:Src/Message.c **** {
  28              		.loc 1 38 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 24
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 4, -24
  37              		.cfi_offset 5, -20
  38              		.cfi_offset 6, -16
  39              		.cfi_offset 7, -12
  40              		.cfi_offset 8, -8
  41              		.cfi_offset 14, -4
  42 0004 86B0     		sub	sp, sp, #24
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 48
  45 0006 0646     		mov	r6, r0
  46 0008 0F46     		mov	r7, r1
  47 000a 9046     		mov	r8, r2
  39:Src/Message.c **** #if !defined(__ICCARM__)
  40:Src/Message.c **** 	const char * s[INV_MSG_LEVEL_MAX] = {
  48              		.loc 1 40 0
  49 000c 6C46     		mov	r4, sp
  50 000e 0F4D     		ldr	r5, .L3
  51 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
  52              	.LVL1:
  53 0012 0FC4     		stmia	r4!, {r0, r1, r2, r3}
  54 0014 95E80300 		ldm	r5, {r0, r1}
  55 0018 84E80300 		stm	r4, {r0, r1}
  41:Src/Message.c **** 		"",    // INV_MSG_LEVEL_OFF
  42:Src/Message.c **** 		" [E] ", // INV_MSG_LEVEL_ERROR
  43:Src/Message.c **** 		" [W] ", // INV_MSG_LEVEL_WARNING
  44:Src/Message.c **** 		" [I] ", // INV_MSG_LEVEL_INFO
  45:Src/Message.c **** 		" [V] ", // INV_MSG_LEVEL_VERBOSE
  46:Src/Message.c **** 		" [D] ", // INV_MSG_LEVEL_DEBUG
  47:Src/Message.c **** 	};
  48:Src/Message.c **** 
  49:Src/Message.c **** 	fprintf(stderr, "%s", s[level]);	
  56              		.loc 1 49 0
  57 001c 0C4C     		ldr	r4, .L3+4
  58 001e 2368     		ldr	r3, [r4]
  59 0020 06AA     		add	r2, sp, #24
  60 0022 02EB8606 		add	r6, r2, r6, lsl #2
  61              	.LVL2:
  62 0026 D968     		ldr	r1, [r3, #12]
  63 0028 56F8180C 		ldr	r0, [r6, #-24]
  64 002c FFF7FEFF 		bl	fputs
  65              	.LVL3:
  50:Src/Message.c **** 	vfprintf(stderr, str, ap);
ARM GAS  /tmp/cc0LxBmV.s 			page 3


  66              		.loc 1 50 0
  67 0030 2368     		ldr	r3, [r4]
  68              	.LVL4:
  69 0032 4246     		mov	r2, r8
  70 0034 3946     		mov	r1, r7
  71 0036 D868     		ldr	r0, [r3, #12]
  72 0038 FFF7FEFF 		bl	vfprintf
  73              	.LVL5:
  51:Src/Message.c **** 	fprintf(stderr, "\n");
  74              		.loc 1 51 0
  75 003c 2368     		ldr	r3, [r4]
  76 003e D968     		ldr	r1, [r3, #12]
  77 0040 0A20     		movs	r0, #10
  78 0042 FFF7FEFF 		bl	fputc
  79              	.LVL6:
  52:Src/Message.c **** #else
  53:Src/Message.c **** 	(void)level, (void)str, (void)ap;
  54:Src/Message.c **** #endif
  55:Src/Message.c **** }
  80              		.loc 1 55 0
  81 0046 06B0     		add	sp, sp, #24
  82              	.LCFI2:
  83              		.cfi_def_cfa_offset 24
  84              		@ sp needed
  85 0048 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
  86              	.LVL7:
  87              	.L4:
  88              		.align	2
  89              	.L3:
  90 004c 00000000 		.word	.LANCHOR0
  91 0050 00000000 		.word	_impure_ptr
  92              		.cfi_endproc
  93              	.LFE128:
  95              		.section	.text.inv_msg_setup,"ax",%progbits
  96              		.align	1
  97              		.global	inv_msg_setup
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 101              		.fpu fpv4-sp-d16
 103              	inv_msg_setup:
 104              	.LFB129:
  56:Src/Message.c **** 
  57:Src/Message.c **** void inv_msg_setup(int level, inv_msg_printer_t printer)
  58:Src/Message.c **** {
 105              		.loc 1 58 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110              	.LVL8:
  59:Src/Message.c **** 	msg_level   = level;
 111              		.loc 1 59 0
 112 0000 074B     		ldr	r3, .L9
 113 0002 1860     		str	r0, [r3]
  60:Src/Message.c **** 	if (level < INV_MSG_LEVEL_OFF)
 114              		.loc 1 60 0
ARM GAS  /tmp/cc0LxBmV.s 			page 4


 115 0004 0028     		cmp	r0, #0
 116 0006 07DB     		blt	.L8
  61:Src/Message.c **** 		msg_level = INV_MSG_LEVEL_OFF;
  62:Src/Message.c **** 	else if (level > INV_MSG_LEVEL_MAX)
 117              		.loc 1 62 0
 118 0008 0628     		cmp	r0, #6
 119 000a 02DD     		ble	.L7
  63:Src/Message.c **** 		msg_level = INV_MSG_LEVEL_MAX;
 120              		.loc 1 63 0
 121 000c 044B     		ldr	r3, .L9
 122 000e 0622     		movs	r2, #6
 123 0010 1A60     		str	r2, [r3]
 124              	.L7:
  64:Src/Message.c **** 	msg_printer = printer;
 125              		.loc 1 64 0
 126 0012 044B     		ldr	r3, .L9+4
 127 0014 1960     		str	r1, [r3]
  65:Src/Message.c **** }
 128              		.loc 1 65 0
 129 0016 7047     		bx	lr
 130              	.L8:
  61:Src/Message.c **** 	else if (level > INV_MSG_LEVEL_MAX)
 131              		.loc 1 61 0
 132 0018 0022     		movs	r2, #0
 133 001a 1A60     		str	r2, [r3]
 134 001c F9E7     		b	.L7
 135              	.L10:
 136 001e 00BF     		.align	2
 137              	.L9:
 138 0020 00000000 		.word	.LANCHOR1
 139 0024 00000000 		.word	.LANCHOR2
 140              		.cfi_endproc
 141              	.LFE129:
 143              		.section	.text.inv_msg,"ax",%progbits
 144              		.align	1
 145              		.global	inv_msg
 146              		.syntax unified
 147              		.thumb
 148              		.thumb_func
 149              		.fpu fpv4-sp-d16
 151              	inv_msg:
 152              	.LFB130:
  66:Src/Message.c **** 
  67:Src/Message.c **** void inv_msg(int level, const char * str, ...)
  68:Src/Message.c **** {
 153              		.loc 1 68 0
 154              		.cfi_startproc
 155              		@ args = 4, pretend = 12, frame = 8
 156              		@ frame_needed = 0, uses_anonymous_args = 1
 157              	.LVL9:
  69:Src/Message.c **** 	if(level && level <= msg_level && msg_printer) {
 158              		.loc 1 69 0
 159 0000 A0B1     		cbz	r0, .L14
  68:Src/Message.c **** 	if(level && level <= msg_level && msg_printer) {
 160              		.loc 1 68 0 discriminator 1
 161 0002 0EB4     		push	{r1, r2, r3}
 162              	.LCFI3:
ARM GAS  /tmp/cc0LxBmV.s 			page 5


 163              		.cfi_def_cfa_offset 12
 164              		.cfi_offset 1, -12
 165              		.cfi_offset 2, -8
 166              		.cfi_offset 3, -4
 167 0004 00B5     		push	{lr}
 168              	.LCFI4:
 169              		.cfi_def_cfa_offset 16
 170              		.cfi_offset 14, -16
 171 0006 82B0     		sub	sp, sp, #8
 172              	.LCFI5:
 173              		.cfi_def_cfa_offset 24
 174              		.loc 1 69 0 discriminator 1
 175 0008 094A     		ldr	r2, .L17
 176 000a 1268     		ldr	r2, [r2]
 177 000c 8242     		cmp	r2, r0
 178 000e 08DB     		blt	.L11
 179              		.loc 1 69 0 is_stmt 0 discriminator 2
 180 0010 084A     		ldr	r2, .L17+4
 181 0012 1268     		ldr	r2, [r2]
 182 0014 2AB1     		cbz	r2, .L11
 183              	.LBB2:
  70:Src/Message.c **** 		va_list ap;
  71:Src/Message.c **** 		va_start(ap, str);
 184              		.loc 1 71 0 is_stmt 1
 185 0016 04AA     		add	r2, sp, #16
 186 0018 0192     		str	r2, [sp, #4]
  72:Src/Message.c **** 		msg_printer(level, str, ap);
 187              		.loc 1 72 0
 188 001a 064B     		ldr	r3, .L17+4
 189 001c 1B68     		ldr	r3, [r3]
 190 001e 0399     		ldr	r1, [sp, #12]
 191 0020 9847     		blx	r3
 192              	.LVL10:
 193              	.L11:
 194              	.LBE2:
  73:Src/Message.c **** 		va_end(ap);
  74:Src/Message.c **** 	}
  75:Src/Message.c **** }
 195              		.loc 1 75 0
 196 0022 02B0     		add	sp, sp, #8
 197              	.LCFI6:
 198              		.cfi_def_cfa_offset 16
 199              		@ sp needed
 200 0024 5DF804EB 		ldr	lr, [sp], #4
 201              	.LCFI7:
 202              		.cfi_restore 14
 203              		.cfi_def_cfa_offset 12
 204 0028 03B0     		add	sp, sp, #12
 205              	.LCFI8:
 206              		.cfi_restore 3
 207              		.cfi_restore 2
 208              		.cfi_restore 1
 209              		.cfi_def_cfa_offset 0
 210 002a 7047     		bx	lr
 211              	.LVL11:
 212              	.L14:
 213 002c 7047     		bx	lr
ARM GAS  /tmp/cc0LxBmV.s 			page 6


 214              	.L18:
 215 002e 00BF     		.align	2
 216              	.L17:
 217 0030 00000000 		.word	.LANCHOR1
 218 0034 00000000 		.word	.LANCHOR2
 219              		.cfi_endproc
 220              	.LFE130:
 222              		.section	.text.inv_msg_get_level,"ax",%progbits
 223              		.align	1
 224              		.global	inv_msg_get_level
 225              		.syntax unified
 226              		.thumb
 227              		.thumb_func
 228              		.fpu fpv4-sp-d16
 230              	inv_msg_get_level:
 231              	.LFB131:
  76:Src/Message.c **** 
  77:Src/Message.c **** int inv_msg_get_level(void)
  78:Src/Message.c **** {
 232              		.loc 1 78 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236              		@ link register save eliminated.
  79:Src/Message.c **** 	return msg_level;
  80:Src/Message.c **** }
 237              		.loc 1 80 0
 238 0000 014B     		ldr	r3, .L20
 239 0002 1868     		ldr	r0, [r3]
 240 0004 7047     		bx	lr
 241              	.L21:
 242 0006 00BF     		.align	2
 243              	.L20:
 244 0008 00000000 		.word	.LANCHOR1
 245              		.cfi_endproc
 246              	.LFE131:
 248              		.section	.text.inv_msg_printer,"ax",%progbits
 249              		.align	1
 250              		.global	inv_msg_printer
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 254              		.fpu fpv4-sp-d16
 256              	inv_msg_printer:
 257              	.LFB132:
  81:Src/Message.c **** 
  82:Src/Message.c **** /*
  83:Src/Message.c ****  * Printer function for message facility
  84:Src/Message.c ****  */
  85:Src/Message.c **** void inv_msg_printer(int level, const char * str, va_list ap)
  86:Src/Message.c **** {
 258              		.loc 1 86 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 24
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              	.LVL12:
 263 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/cc0LxBmV.s 			page 7


 264              	.LCFI9:
 265              		.cfi_def_cfa_offset 24
 266              		.cfi_offset 4, -24
 267              		.cfi_offset 5, -20
 268              		.cfi_offset 6, -16
 269              		.cfi_offset 7, -12
 270              		.cfi_offset 8, -8
 271              		.cfi_offset 14, -4
 272 0004 86B0     		sub	sp, sp, #24
 273              	.LCFI10:
 274              		.cfi_def_cfa_offset 48
 275 0006 0646     		mov	r6, r0
 276 0008 0F46     		mov	r7, r1
 277 000a 9046     		mov	r8, r2
 278              	.LVL13:
  87:Src/Message.c **** 	static char out_str[256]; /* static to limit stack usage */
  88:Src/Message.c **** 	unsigned idx = 0;
  89:Src/Message.c **** 	unsigned char * ptr = (unsigned char *)out_str;
  90:Src/Message.c **** 	const char * s[INV_MSG_LEVEL_MAX] = {
 279              		.loc 1 90 0
 280 000c 6C46     		mov	r4, sp
 281 000e 1A4D     		ldr	r5, .L27
 282 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 283              	.LVL14:
 284 0012 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 285 0014 95E80300 		ldm	r5, {r0, r1}
 286 0018 84E80300 		stm	r4, {r0, r1}
  91:Src/Message.c **** 		"",    // INV_MSG_LEVEL_OFF
  92:Src/Message.c **** 		"[E] ", // INV_MSG_LEVEL_ERROR
  93:Src/Message.c **** 		"[W] ", // INV_MSG_LEVEL_WARNING
  94:Src/Message.c **** 		"[I] ", // INV_MSG_LEVEL_INFO
  95:Src/Message.c **** 		"[V] ", // INV_MSG_LEVEL_VERBOSE
  96:Src/Message.c **** 		"[D] ", // INV_MSG_LEVEL_DEBUG
  97:Src/Message.c **** 	};
  98:Src/Message.c **** 	idx += snprintf(&out_str[idx], sizeof(out_str) - idx, "%s", s[level]);
 287              		.loc 1 98 0
 288 001c 06AB     		add	r3, sp, #24
 289 001e 03EB8606 		add	r6, r3, r6, lsl #2
 290              	.LVL15:
 291 0022 56F8183C 		ldr	r3, [r6, #-24]
 292 0026 154A     		ldr	r2, .L27+4
 293 0028 4FF48071 		mov	r1, #256
 294 002c 1448     		ldr	r0, .L27+8
 295 002e FFF7FEFF 		bl	snprintf
 296              	.LVL16:
  99:Src/Message.c **** 	if(idx >= (sizeof(out_str)))
 297              		.loc 1 99 0
 298 0032 FF28     		cmp	r0, #255
 299 0034 02D9     		bls	.L26
 300              	.LVL17:
 301              	.L22:
 100:Src/Message.c **** 		return;
 101:Src/Message.c **** 	idx += vsnprintf(&out_str[idx], sizeof(out_str) - idx, str, ap);
 102:Src/Message.c **** 	if(idx >= (sizeof(out_str)))
 103:Src/Message.c **** 		return;
 104:Src/Message.c **** 	idx += snprintf(&out_str[idx], sizeof(out_str) - idx, "\r\n");
 105:Src/Message.c **** 	if(idx >= (sizeof(out_str)))
ARM GAS  /tmp/cc0LxBmV.s 			page 8


 106:Src/Message.c **** 		return;
 107:Src/Message.c **** 
 108:Src/Message.c **** 	HAL_UART_Transmit(&huart1, ptr, idx, 200);
 109:Src/Message.c **** }
 302              		.loc 1 109 0
 303 0036 06B0     		add	sp, sp, #24
 304              	.LCFI11:
 305              		.cfi_remember_state
 306              		.cfi_def_cfa_offset 24
 307              		@ sp needed
 308 0038 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 309              	.LVL18:
 310              	.L26:
 311              	.LCFI12:
 312              		.cfi_restore_state
 313 003c 0446     		mov	r4, r0
 314              	.LVL19:
 101:Src/Message.c **** 	if(idx >= (sizeof(out_str)))
 315              		.loc 1 101 0
 316 003e 4346     		mov	r3, r8
 317 0040 3A46     		mov	r2, r7
 318 0042 C0F58071 		rsb	r1, r0, #256
 319 0046 0E48     		ldr	r0, .L27+8
 320              	.LVL20:
 321 0048 2044     		add	r0, r0, r4
 322 004a FFF7FEFF 		bl	vsnprintf
 323              	.LVL21:
 324 004e 0444     		add	r4, r4, r0
 325              	.LVL22:
 102:Src/Message.c **** 		return;
 326              		.loc 1 102 0
 327 0050 FF2C     		cmp	r4, #255
 328 0052 F0D8     		bhi	.L22
 104:Src/Message.c **** 	if(idx >= (sizeof(out_str)))
 329              		.loc 1 104 0
 330 0054 0B4A     		ldr	r2, .L27+12
 331 0056 C4F58071 		rsb	r1, r4, #256
 332 005a 0948     		ldr	r0, .L27+8
 333 005c 2044     		add	r0, r0, r4
 334 005e FFF7FEFF 		bl	snprintf
 335              	.LVL23:
 336 0062 0234     		adds	r4, r4, #2
 337              	.LVL24:
 105:Src/Message.c **** 		return;
 338              		.loc 1 105 0
 339 0064 FF2C     		cmp	r4, #255
 340 0066 E6D8     		bhi	.L22
 108:Src/Message.c **** }
 341              		.loc 1 108 0
 342 0068 C823     		movs	r3, #200
 343 006a A2B2     		uxth	r2, r4
 344 006c 0449     		ldr	r1, .L27+8
 345 006e 0648     		ldr	r0, .L27+16
 346 0070 FFF7FEFF 		bl	HAL_UART_Transmit
 347              	.LVL25:
 348 0074 DFE7     		b	.L22
 349              	.L28:
ARM GAS  /tmp/cc0LxBmV.s 			page 9


 350 0076 00BF     		.align	2
 351              	.L27:
 352 0078 18000000 		.word	.LANCHOR0+24
 353 007c 00000000 		.word	.LC15
 354 0080 00000000 		.word	.LANCHOR3
 355 0084 04000000 		.word	.LC16
 356 0088 00000000 		.word	huart1
 357              		.cfi_endproc
 358              	.LFE132:
 360              		.section	.rodata
 361              		.align	2
 362              		.set	.LANCHOR0,. + 0
 363              	.LC13:
 364 0000 00000000 		.word	.LC0
 365 0004 2C000000 		.word	.LC1
 366 0008 34000000 		.word	.LC2
 367 000c 3C000000 		.word	.LC3
 368 0010 44000000 		.word	.LC4
 369 0014 4C000000 		.word	.LC5
 370              	.LC14:
 371 0018 00000000 		.word	.LC0
 372 001c 04000000 		.word	.LC7
 373 0020 0C000000 		.word	.LC8
 374 0024 14000000 		.word	.LC9
 375 0028 1C000000 		.word	.LC10
 376 002c 24000000 		.word	.LC11
 377              		.section	.bss.msg_level,"aw",%nobits
 378              		.align	2
 379              		.set	.LANCHOR1,. + 0
 382              	msg_level:
 383 0000 00000000 		.space	4
 384              		.section	.bss.msg_printer,"aw",%nobits
 385              		.align	2
 386              		.set	.LANCHOR2,. + 0
 389              	msg_printer:
 390 0000 00000000 		.space	4
 391              		.section	.bss.out_str.9551,"aw",%nobits
 392              		.align	2
 393              		.set	.LANCHOR3,. + 0
 396              	out_str.9551:
 397 0000 00000000 		.space	256
 397      00000000 
 397      00000000 
 397      00000000 
 397      00000000 
 398              		.section	.rodata.inv_msg_printer.str1.4,"aMS",%progbits,1
 399              		.align	2
 400              	.LC15:
 401 0000 257300   		.ascii	"%s\000"
 402 0003 00       		.space	1
 403              	.LC16:
 404 0004 0D0A00   		.ascii	"\015\012\000"
 405              		.section	.rodata.str1.4,"aMS",%progbits,1
 406              		.align	2
 407              	.LC0:
 408 0000 00       		.ascii	"\000"
 409 0001 000000   		.space	3
ARM GAS  /tmp/cc0LxBmV.s 			page 10


 410              	.LC7:
 411 0004 5B455D20 		.ascii	"[E] \000"
 411      00
 412 0009 000000   		.space	3
 413              	.LC8:
 414 000c 5B575D20 		.ascii	"[W] \000"
 414      00
 415 0011 000000   		.space	3
 416              	.LC9:
 417 0014 5B495D20 		.ascii	"[I] \000"
 417      00
 418 0019 000000   		.space	3
 419              	.LC10:
 420 001c 5B565D20 		.ascii	"[V] \000"
 420      00
 421 0021 000000   		.space	3
 422              	.LC11:
 423 0024 5B445D20 		.ascii	"[D] \000"
 423      00
 424 0029 000000   		.space	3
 425              	.LC1:
 426 002c 205B455D 		.ascii	" [E] \000"
 426      2000
 427 0032 0000     		.space	2
 428              	.LC2:
 429 0034 205B575D 		.ascii	" [W] \000"
 429      2000
 430 003a 0000     		.space	2
 431              	.LC3:
 432 003c 205B495D 		.ascii	" [I] \000"
 432      2000
 433 0042 0000     		.space	2
 434              	.LC4:
 435 0044 205B565D 		.ascii	" [V] \000"
 435      2000
 436 004a 0000     		.space	2
 437              	.LC5:
 438 004c 205B445D 		.ascii	" [D] \000"
 438      2000
 439              		.text
 440              	.Letext0:
 441              		.file 2 "/mnt/NData/Softwares/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/inclu
 442              		.file 3 "Inc/Message.h"
 443              		.file 4 "/mnt/NData/Softwares/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_de
 444              		.file 5 "/mnt/NData/Softwares/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 445              		.file 6 "/mnt/NData/Softwares/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.
 446              		.file 7 "/mnt/NData/Softwares/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/inclu
 447              		.file 8 "/mnt/NData/Softwares/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h
 448              		.file 9 "<built-in>"
 449              		.file 10 "/mnt/NData/Softwares/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdin
 450              		.file 11 "/mnt/NData/Softwares/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h"
 451              		.file 12 "Drivers/CMSIS/Include/core_cm4.h"
 452              		.file 13 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 453              		.file 14 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 454              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 455              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 456              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
ARM GAS  /tmp/cc0LxBmV.s 			page 11


 457              		.file 18 "/mnt/NData/Softwares/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdio.h"
ARM GAS  /tmp/cc0LxBmV.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Message.c
     /tmp/cc0LxBmV.s:18     .text.inv_msg_printer_default:0000000000000000 $t
     /tmp/cc0LxBmV.s:25     .text.inv_msg_printer_default:0000000000000000 inv_msg_printer_default
     /tmp/cc0LxBmV.s:90     .text.inv_msg_printer_default:000000000000004c $d
     /tmp/cc0LxBmV.s:96     .text.inv_msg_setup:0000000000000000 $t
     /tmp/cc0LxBmV.s:103    .text.inv_msg_setup:0000000000000000 inv_msg_setup
     /tmp/cc0LxBmV.s:138    .text.inv_msg_setup:0000000000000020 $d
     /tmp/cc0LxBmV.s:144    .text.inv_msg:0000000000000000 $t
     /tmp/cc0LxBmV.s:151    .text.inv_msg:0000000000000000 inv_msg
     /tmp/cc0LxBmV.s:217    .text.inv_msg:0000000000000030 $d
     /tmp/cc0LxBmV.s:223    .text.inv_msg_get_level:0000000000000000 $t
     /tmp/cc0LxBmV.s:230    .text.inv_msg_get_level:0000000000000000 inv_msg_get_level
     /tmp/cc0LxBmV.s:244    .text.inv_msg_get_level:0000000000000008 $d
     /tmp/cc0LxBmV.s:249    .text.inv_msg_printer:0000000000000000 $t
     /tmp/cc0LxBmV.s:256    .text.inv_msg_printer:0000000000000000 inv_msg_printer
     /tmp/cc0LxBmV.s:352    .text.inv_msg_printer:0000000000000078 $d
     /tmp/cc0LxBmV.s:361    .rodata:0000000000000000 $d
     /tmp/cc0LxBmV.s:378    .bss.msg_level:0000000000000000 $d
     /tmp/cc0LxBmV.s:382    .bss.msg_level:0000000000000000 msg_level
     /tmp/cc0LxBmV.s:385    .bss.msg_printer:0000000000000000 $d
     /tmp/cc0LxBmV.s:389    .bss.msg_printer:0000000000000000 msg_printer
     /tmp/cc0LxBmV.s:392    .bss.out_str.9551:0000000000000000 $d
     /tmp/cc0LxBmV.s:396    .bss.out_str.9551:0000000000000000 out_str.9551
     /tmp/cc0LxBmV.s:399    .rodata.inv_msg_printer.str1.4:0000000000000000 $d
     /tmp/cc0LxBmV.s:406    .rodata.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
fputs
vfprintf
fputc
_impure_ptr
snprintf
vsnprintf
HAL_UART_Transmit
huart1
